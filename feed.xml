<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-10-12T07:42:20+00:00</updated><id>/feed.xml</id><title type="html">Richard’s Blog</title><entry><title type="html">Naming Guidelines</title><link href="/posts/Naming-Guidelines" rel="alternate" type="text/html" title="Naming Guidelines" /><published>2020-10-11T00:00:00+00:00</published><updated>2020-10-11T00:00:00+00:00</updated><id>/posts/Naming-Guidelines</id><content type="html" xml:base="/posts/Naming-Guidelines">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Programming is a team sport where we use code to send messages of intent to our future selves.
&lt;strong&gt;The messages&lt;/strong&gt; are &lt;strong&gt;the names&lt;/strong&gt; we have assigned to various &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt; and other code elements.
The assigned name can then help our future selves figure out the intent of an element and if a new piece of functionality goes here or over there.
Thus naming is inseparable from design.
A well-chosen name is the difference between one hour of &lt;em&gt;&quot;I know exactly what to do&quot;&lt;/em&gt; and days and weeks of rework because &lt;em&gt;&quot;I thought I needed to do this but actually&amp;#8230;&amp;#8203;&quot;&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are 2 hard problems in computer science: cache invalidation, naming things, and off-by-1 errors.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Leon Bambrick
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;True to the above quote I still find namings things very hard.
Fortunately &lt;a href=&quot;https://journal.stuffwithstuff.com/&quot;&gt;Bob Nystrom&lt;/a&gt; has written two great blog posts on the subject: &lt;a href=&quot;https://journal.stuffwithstuff.com/2016/06/16/long-names-are-long/&quot;&gt;Long Names are Long&lt;/a&gt; and &lt;a href=&quot;https://journal.stuffwithstuff.com/2009/06/05/naming-things-in-code/&quot;&gt;Naming Things in Code&lt;/a&gt;.
These two describe guidelines for naming which I want to reiterate, extend and sometimes even change.
Most of the stuff I&amp;#8217;ve added are ideas from the community (f.ex. &lt;a href=&quot;https://printhelloworld.de/&quot;&gt;Johannes Seitz&lt;/a&gt;).
I&amp;#8217;m not making any originality vows here :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a future post I&amp;#8217;d also like to take a look at &lt;a href=&quot;https://arlobelshee.com/&quot;&gt;Arlo Belshee&amp;#8217;s&lt;/a&gt; &quot;Naming is a Process&quot; which describes the process of coming up with a good name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you know about even more great articles, books, etc. please consider contacting me using Twitter and the like.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;good-names&quot;&gt;Good Names&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A name has one goal:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It needs to reveal the authors &lt;strong&gt;intention&lt;/strong&gt; (see &lt;a href=&quot;https://www.martinfowler.com/bliki/BeckDesignRules.html&quot;&gt;Kent Beck&amp;#8217;s Four Rules of Simple Design&lt;/a&gt;). Which means:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It needs to be &lt;strong&gt;clear&lt;/strong&gt;: you need to know what the name refers to (&lt;a href=&quot;https://journal.stuffwithstuff.com/2016/06/16/long-names-are-long/&quot;&gt;Long Names are Long&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It needs to be &lt;strong&gt;precise&lt;/strong&gt;: you need to know what it does &lt;strong&gt;not&lt;/strong&gt; refer to (&lt;a href=&quot;https://journal.stuffwithstuff.com/2016/06/16/long-names-are-long/&quot;&gt;Long Names are Long&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once a name has accomplished its goal, any additional characters are redundant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following guidelines will help us write terse code that communicates intention.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;use-one-word-per-concept&quot;&gt;Use one word per concept&lt;/h3&gt;
&lt;div class=&quot;ulist checklist&quot;&gt;
&lt;ul class=&quot;checklist&quot;&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; Use one word per concept.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// Bad (three variations for the same concept: fetching accounts):&lt;/span&gt;
&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;fun&lt;/span&gt; &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;fetchActiveAccount&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;():&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;List&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Account&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;fun&lt;/span&gt; &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;allActiveAccounts&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;():&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;List&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Account&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;fun&lt;/span&gt; &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;retrieveActiveAccountInfo&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;():&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;List&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Account&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// Better&lt;/span&gt;
&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;fun&lt;/span&gt; &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;allActiveAccounts&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;():&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;List&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Account&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;omit-words-that-are-obvious-given-a-variables-or-parameters-type&quot;&gt;Omit words that are obvious given a variable’s or parameter’s type&lt;/h3&gt;
&lt;div class=&quot;ulist checklist&quot;&gt;
&lt;ul class=&quot;checklist&quot;&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; Don&amp;#8217;t put the type in the variable’s name&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// Bad:&lt;/span&gt;
&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;integerId&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Int&lt;/span&gt;
&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;nameString&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;String&lt;/span&gt;
&lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// Better&lt;/span&gt;
&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Int&lt;/span&gt;
&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;String&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; Pair Numbers and their unit (5 meter, 20 seconds, 5 €) so you can never pass seconds to a method that expects milliseconds (length class in the appendix)&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// Bad:&lt;/span&gt;
&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;lengthInMillis&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Int&lt;/span&gt;
&lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// Better&lt;/span&gt;
&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;length&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Length&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; Express concepts with types and avoid &lt;a href=&quot;https://wiki.c2.com/?StringlyTyped&quot;&gt;stringly typed&lt;/a&gt; code.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// Bad:&lt;/span&gt;
&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Person&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;constructor&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;String&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;street&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;String&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;zipCode&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;String&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;city&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;String&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;){&lt;/span&gt; &lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;/* */&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;

&lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// Better:&lt;/span&gt;
&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Person&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;constructor&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Name&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;address&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Address&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;){&lt;/span&gt; &lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;/* */&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Address&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;constructor&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;street&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Street&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;zipCode&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;ZipCode&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;city&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;City&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;){&lt;/span&gt; &lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;/* */&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; Name collections not by their type but what&amp;#8217;s in them using the (forced) plural form.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// Bad:&lt;/span&gt;
&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;personList&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;List&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Person&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;furnitureList&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;List&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Furniture&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;dogPersonHashMap&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Map&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Dog&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Person&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// Better&lt;/span&gt;
&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;people&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;List&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Person&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;furnitures&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;List&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Furniture&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;dogOwners&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Map&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Dog&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Person&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; Don’t add the argument name to function name. It&amp;#8217;s redundant since our type system and IDE tell us everything we need to know.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// Bad:&lt;/span&gt;
&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;fun&lt;/span&gt; &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;mergeTableCells&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;cells&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;List&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;TableCell&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;gt;)&lt;/span&gt;
&lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// Better&lt;/span&gt;
&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;fun&lt;/span&gt; &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;merge&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;cells&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;List&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;TableCell&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This also makes the call easier to read: &lt;code&gt;merge(cells)&lt;/code&gt; vs &lt;code&gt;mergeTableCells(tableCells)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; Only describe the return in the name if there are identical functions that return different types.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// Bad:&lt;/span&gt;
&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;list&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;countInt&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;()&lt;/span&gt;
&lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// Better:&lt;/span&gt;
&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;list&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;count&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;()&lt;/span&gt;
&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;message&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;valueAsInt&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;()&lt;/span&gt;
&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;message&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;valueAsFloat&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;omit-words-that-dont-disambiguate-the-name&quot;&gt;Omit words that don’t disambiguate the name&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Take a look at &lt;code&gt;recentlyUpdatedAnnualSalesBid&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Are there updated annual sales bids that aren’t &lt;strong&gt;recent&lt;/strong&gt;?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Are there recent annual sales bids that were not &lt;strong&gt;updated&lt;/strong&gt;?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Are there recently updated sales bids that aren’t &lt;strong&gt;annual&lt;/strong&gt;?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And so on. We can apply such questioning to all of our names to figure out which words are just fluff, don’t disambiguate the name and should be removed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;omit-words-that-are-known-from-the-surrounding-context&quot;&gt;Omit words that are known from the surrounding context&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Class variables are in the context of their class. Class names are in the context of their component and so on.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// Bad:&lt;/span&gt;
&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;AnnualHolidaySale&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;constructor&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;annualSaleRebate&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Rebate&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;){&lt;/span&gt;
    &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;fun&lt;/span&gt; &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;promoteHolidaySale&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;{&lt;/span&gt; &lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;/* */&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;

&lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// Better:&lt;/span&gt;
&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;AnnualHolidaySale&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;constructor&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;rebate&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Rebate&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;){&lt;/span&gt;
    &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;fun&lt;/span&gt; &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;promote&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;{&lt;/span&gt; &lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;/* */&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;omit-words-that-dont-mean-much-of-anything&quot;&gt;Omit words that don’t mean much of anything&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We&amp;#8217;re looking at you &lt;code&gt;manager&lt;/code&gt;, &lt;code&gt;instance&lt;/code&gt;, &lt;code&gt;amount&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt; etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Connection&lt;/code&gt; provides exactly the same information as &lt;code&gt;ConnectionManager&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If in doubt ask yourself &lt;em&gt;“Would this name mean the same thing if I removed the word?”&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Never use &lt;em&gt;set-Methods&lt;/em&gt;. The Merriam-Webster dictionary has more than 25 definitions of the verb set. It is one of the least-precise words you can use. Consider using names that express intent and give you the ability to protect invariants.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// Bad&lt;/span&gt;
&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;car&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;setEngineState&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;EngineState&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;On&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;car&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;setDestination&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;London&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// Better&lt;/span&gt;
&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;car&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;start&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;()&lt;/span&gt;
&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;car&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;plotCourseTo&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;London&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Never use &lt;em&gt;get-Methods&lt;/em&gt;. The Merriam-Webster dictionary has more than 15 definitions of the verb get. Name functions that just return a property and don’t change state using nouns. Using a get as prefix does not provide any meaningful additional information and is just fluff.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// Bad&lt;/span&gt;
&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;obj&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;getCount&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;()&lt;/span&gt;
&lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// Better&lt;/span&gt;
&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;dogs&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;count&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use one word per concept&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Omit words that are obvious given a variable’s or parameter’s type&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Omit words that don’t disambiguate the name&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Omit words that are known from the surrounding context&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Omit words that don’t mean much of anything&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope these guidelines provide value to you.
Most of them are from &lt;a href=&quot;https://journal.stuffwithstuff.com/2016/06/16/long-names-are-long/&quot;&gt;Long Names are Long&lt;/a&gt; and I&amp;#8217;ve only added little bits here and there.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;appendix-length-class&quot;&gt;Appendix: Length class&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s not hard to write a class that pairs a number and a unit.
I&amp;#8217;ve included an example below with lots of useful methods.
Depending on your domain a money object can be more challenging because you do have to remember your unit and can&amp;#8217;t convert everything to a default unit.
Please also not that I used integer precision for my length.
Depending on your domain you might want to use long or BigDecimal instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// (you can write this much shorter if you use Kotlin data classes or Java records)&lt;/span&gt;
&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Length&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;constructor&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;rawValueInMeter&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Int&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;):&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Comparable&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Length&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// so that Length(4) == Length(4)&lt;/span&gt;
    &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;fun&lt;/span&gt; &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;equals&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;other&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Any&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;?):&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Boolean&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;other&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;===&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;true&lt;/span&gt;
        &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;other&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;!&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;is&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Length&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;false&lt;/span&gt;
        &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Objects&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;equals&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;rawValueInMeter&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;other&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;rawValueInMeter&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;
    &lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// so that you can use Length in a Set or Map&lt;/span&gt;
    &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;fun&lt;/span&gt; &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;hashCode&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;():&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Int&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;{&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Objects&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;hash&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;rawValueInMeter&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;
    &lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// for nicer debugging&lt;/span&gt;
    &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;fun&lt;/span&gt; &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;toString&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;():&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;String&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;{&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #d14&quot;&gt;&quot;$rawValueInMeter m&quot;&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;

    &lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// so that Length(4) &amp;lt; Length(5)&lt;/span&gt;
    &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;operator&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;fun&lt;/span&gt; &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;compareTo&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;other&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Length&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;):&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Int&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;rawValueInMeter&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;compareTo&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;other&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;rawValueInMeter&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// so that Length(4) + Length(5) = Length(9)&lt;/span&gt;
    &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;operator&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;fun&lt;/span&gt; &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;plus&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;other&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Length&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Length&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;rawValueInMeter&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;other&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;rawValueInMeter&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// so that Length(8) - Length(5) = Length(3)&lt;/span&gt;
    &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;operator&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;fun&lt;/span&gt; &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;minus&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;other&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Length&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Length&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;rawValueInMeter&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;-&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;other&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;rawValueInMeter&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;)&lt;/span&gt;

    &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;companion&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// so that you can write Length.fromMeter(4) and know the unit&lt;/span&gt;
        &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;fun&lt;/span&gt; &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;fromMeter&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;meter&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Int&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Length&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;meter&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="naming" /><category term="code" /><summary type="html">Programming is a team sport where we use code to send messages of intent to our future selves. The messages are the names we have assigned to various function, class and other code elements. The assigned name can then help our future selves figure out the intent of an element and if a new piece of functionality goes here or over there. Thus naming is inseparable from design. A well-chosen name is the difference between one hour of &quot;I know exactly what to do&quot; and days and weeks of rework because &quot;I thought I needed to do this but actually&amp;#8230;&amp;#8203;&quot;.</summary></entry><entry><title type="html">Contract Tests in Kotlin</title><link href="/posts/Contract-Tests-in-Kotlin" rel="alternate" type="text/html" title="Contract Tests in Kotlin" /><published>2020-08-24T00:00:00+00:00</published><updated>2020-08-24T00:00:00+00:00</updated><id>/posts/Contract-Tests-in-Kotlin</id><content type="html" xml:base="/posts/Contract-Tests-in-Kotlin">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my current Kotlin project we often have two code elements that implement the same interface.
We have &lt;code&gt;InMemoryXyzRepositories&lt;/code&gt; that double &lt;code&gt;PostgresXyzRepositories&lt;/code&gt; during tests.
We also have a &lt;code&gt;GuavaEventBus&lt;/code&gt; that we want to switch on when our environment does not provide a &lt;code&gt;KafkaEventBus&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How can we be sure that both pieces of code behave the same way and continue to do so?
Thankfully we found an article on &lt;a href=&quot;https://blog.thecodewhisperer.com/permalink/getting-started-with-contract-tests&quot;&gt;Contract Tests&lt;/a&gt; by J. B. Rainsberger.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A contract test is a test were you document your &lt;strong&gt;understanding of the behavior&lt;/strong&gt; of an interface.
To do this, you need an interface, your favorite test framework and at least one interface implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ll demonstrate the idea with some code.
The complete code can be found on &lt;a href=&quot;https://github.com/Richargh/contract-tests-krdl-kt-sandbox&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;DogsContract&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;{&lt;/span&gt; // &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
    &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;abstract&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;fun&lt;/span&gt; &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;dogs&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;():&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Dogs&lt;/span&gt; // &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;

    &lt;span style=&quot;color: #3c5d5d;font-weight: bold&quot;&gt;@Test&lt;/span&gt;
    &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;fun&lt;/span&gt; &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;`a&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;dog&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;in&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;the&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;repo&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;should&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;be&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;findable&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;by&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;its&lt;/span&gt; &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;id`&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// arrange&lt;/span&gt;
        &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;testling&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;dogs&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;()&lt;/span&gt;
        &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;adog&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Dog&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;DogId&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;),&lt;/span&gt; &lt;span style=&quot;color: #d14&quot;&gt;&quot;Spike&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;)&lt;/span&gt;
        &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;testling&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;adog&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;)&lt;/span&gt;

        &lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// act&lt;/span&gt;
        &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;result&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;testling&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;findById&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;adog&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;)&lt;/span&gt;

        &lt;span style=&quot;color: #999988;font-style: italic&quot;&gt;// assert&lt;/span&gt;
        &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;assertThat&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;result&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;).&lt;/span&gt;&lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;isEqualTo&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;adog&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;

&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;interface&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Dogs&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;{&lt;/span&gt; // &lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;
    &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;fun&lt;/span&gt; &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;dog&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Dog&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;fun&lt;/span&gt; &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;findById&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;DogId&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;):&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Dog&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;?&lt;/span&gt;
&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create an abstract contact, where you document your understanding of the behavior&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a way to get your interface implementation; the method might take parameters if you want to initialize your implementation with specific data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The interface for which you create the contract&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;code&gt;Dogs&lt;/code&gt; is a repository which can be used to retrieve the domain object &lt;code&gt;Dog&lt;/code&gt;.
I like the convention where the name of the repository is the plural of the domain object for which it is responsible.
This keeps my domain clear of technical terms like &lt;code&gt;Repository&lt;/code&gt; or &lt;code&gt;Database&lt;/code&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After you have written your contract, you can write the implementation and the test for the implementation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;InMemoryDogsTest&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;DogsContract&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;fun&lt;/span&gt; &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;dogs&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;():&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Dogs&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;{&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;InMemoryDogs&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;

&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;InMemoryDogs&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Dogs&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;val&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;dogs&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;ConcurrentHashMap&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;DogId&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Dog&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span style=&quot;color: #009999&quot;&gt;16&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;)&lt;/span&gt;

    &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;fun&lt;/span&gt; &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;dog&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Dog&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;{&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;dogs&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;dog&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;dog&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;
    &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;override&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;fun&lt;/span&gt; &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;findById&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;DogId&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;):&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Dog&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;?&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;{&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;dogs&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Maven&lt;/code&gt;, &lt;code&gt;Gradle&lt;/code&gt; and IntelliJ will run all implementations of &lt;code&gt;DogsContract&lt;/code&gt;.
The &lt;a href=&quot;https://www.jetbrains.com/help/idea/settings-gutter-icons.html&quot;&gt;gutter icon&lt;/a&gt; in IntelliJ will ask you if you want to run a specific implementation or all of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I like to put the &lt;code&gt;XyzContract&lt;/code&gt; in the same package as the interface and likewise for the &lt;code&gt;XyzTest&lt;/code&gt;.
If &lt;code&gt;Dogs&lt;/code&gt; is in &lt;code&gt;src/main/de.richargh.application&lt;/code&gt;, then &lt;code&gt;DogsContract&lt;/code&gt; is in &lt;code&gt;src/test/de.richargh.application&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I also like to tag my &lt;code&gt;InMemoryDogsTest&lt;/code&gt; differently than a &lt;code&gt;RemotePartnerServiceDogsTest&lt;/code&gt;.
The former gets no annotation because it&amp;#8217;s part of my fast test suite that I want to execute before every commit.
The latter gets a &lt;code&gt;@Tag(&quot;remotepartner&quot;)&lt;/code&gt; because I need infrastructure outside my JVM container to run it and I will for the most part let my build pipeline do the executing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;The awesome part&lt;/strong&gt; is that I can now have two or more implementations of the same interface and they &lt;strong&gt;will stay in sync.&lt;/strong&gt;
Writing these contract tests does not take much effort on my part
and they allow me to express contract behavior the same way I express any other behavior.&lt;/p&gt;
&lt;/div&gt;</content><author><name></name></author><category term="test" /><summary type="html">In my current Kotlin project we often have two code elements that implement the same interface. We have InMemoryXyzRepositories that double PostgresXyzRepositories during tests. We also have a GuavaEventBus that we want to switch on when our environment does not provide a KafkaEventBus.</summary></entry></feed>